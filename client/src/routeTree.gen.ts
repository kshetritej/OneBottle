/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NotificationsImport } from './routes/notifications'
import { Route as MeImport } from './routes/me'
import { Route as AuthImport } from './routes/auth'
import { Route as ProductProductIdImport } from './routes/product/$productId'
import { Route as AdminDashboardImport } from './routes/admin/dashboard'
import { Route as AdminAuthImport } from './routes/admin/auth'
import { Route as AdminProductsIndexImport } from './routes/admin/products/index'
import { Route as AdminCategoriesIndexImport } from './routes/admin/categories/index'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const NotificationsRoute = NotificationsImport.update({
  path: '/notifications',
  getParentRoute: () => rootRoute,
} as any)

const MeRoute = MeImport.update({
  path: '/me',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ProductProductIdRoute = ProductProductIdImport.update({
  path: '/product/$productId',
  getParentRoute: () => rootRoute,
} as any)

const AdminDashboardRoute = AdminDashboardImport.update({
  path: '/admin/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AdminAuthRoute = AdminAuthImport.update({
  path: '/admin/auth',
  getParentRoute: () => rootRoute,
} as any)

const AdminProductsIndexRoute = AdminProductsIndexImport.update({
  path: '/admin/products/',
  getParentRoute: () => rootRoute,
} as any)

const AdminCategoriesIndexRoute = AdminCategoriesIndexImport.update({
  path: '/admin/categories/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/me': {
      id: '/me'
      path: '/me'
      fullPath: '/me'
      preLoaderRoute: typeof MeImport
      parentRoute: typeof rootRoute
    }
    '/notifications': {
      id: '/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/auth': {
      id: '/admin/auth'
      path: '/admin/auth'
      fullPath: '/admin/auth'
      preLoaderRoute: typeof AdminAuthImport
      parentRoute: typeof rootRoute
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/admin/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardImport
      parentRoute: typeof rootRoute
    }
    '/product/$productId': {
      id: '/product/$productId'
      path: '/product/$productId'
      fullPath: '/product/$productId'
      preLoaderRoute: typeof ProductProductIdImport
      parentRoute: typeof rootRoute
    }
    '/admin/categories/': {
      id: '/admin/categories/'
      path: '/admin/categories'
      fullPath: '/admin/categories'
      preLoaderRoute: typeof AdminCategoriesIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/products/': {
      id: '/admin/products/'
      path: '/admin/products'
      fullPath: '/admin/products'
      preLoaderRoute: typeof AdminProductsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/auth': typeof AuthRoute
  '/me': typeof MeRoute
  '/notifications': typeof NotificationsRoute
  '/about': typeof AboutLazyRoute
  '/admin/auth': typeof AdminAuthRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/product/$productId': typeof ProductProductIdRoute
  '/admin/categories': typeof AdminCategoriesIndexRoute
  '/admin/products': typeof AdminProductsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/auth': typeof AuthRoute
  '/me': typeof MeRoute
  '/notifications': typeof NotificationsRoute
  '/about': typeof AboutLazyRoute
  '/admin/auth': typeof AdminAuthRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/product/$productId': typeof ProductProductIdRoute
  '/admin/categories': typeof AdminCategoriesIndexRoute
  '/admin/products': typeof AdminProductsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/auth': typeof AuthRoute
  '/me': typeof MeRoute
  '/notifications': typeof NotificationsRoute
  '/about': typeof AboutLazyRoute
  '/admin/auth': typeof AdminAuthRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/product/$productId': typeof ProductProductIdRoute
  '/admin/categories/': typeof AdminCategoriesIndexRoute
  '/admin/products/': typeof AdminProductsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/me'
    | '/notifications'
    | '/about'
    | '/admin/auth'
    | '/admin/dashboard'
    | '/product/$productId'
    | '/admin/categories'
    | '/admin/products'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/me'
    | '/notifications'
    | '/about'
    | '/admin/auth'
    | '/admin/dashboard'
    | '/product/$productId'
    | '/admin/categories'
    | '/admin/products'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/me'
    | '/notifications'
    | '/about'
    | '/admin/auth'
    | '/admin/dashboard'
    | '/product/$productId'
    | '/admin/categories/'
    | '/admin/products/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AuthRoute: typeof AuthRoute
  MeRoute: typeof MeRoute
  NotificationsRoute: typeof NotificationsRoute
  AboutLazyRoute: typeof AboutLazyRoute
  AdminAuthRoute: typeof AdminAuthRoute
  AdminDashboardRoute: typeof AdminDashboardRoute
  ProductProductIdRoute: typeof ProductProductIdRoute
  AdminCategoriesIndexRoute: typeof AdminCategoriesIndexRoute
  AdminProductsIndexRoute: typeof AdminProductsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AuthRoute: AuthRoute,
  MeRoute: MeRoute,
  NotificationsRoute: NotificationsRoute,
  AboutLazyRoute: AboutLazyRoute,
  AdminAuthRoute: AdminAuthRoute,
  AdminDashboardRoute: AdminDashboardRoute,
  ProductProductIdRoute: ProductProductIdRoute,
  AdminCategoriesIndexRoute: AdminCategoriesIndexRoute,
  AdminProductsIndexRoute: AdminProductsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth",
        "/me",
        "/notifications",
        "/about",
        "/admin/auth",
        "/admin/dashboard",
        "/product/$productId",
        "/admin/categories/",
        "/admin/products/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/auth": {
      "filePath": "auth.tsx"
    },
    "/me": {
      "filePath": "me.tsx"
    },
    "/notifications": {
      "filePath": "notifications.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/admin/auth": {
      "filePath": "admin/auth.tsx"
    },
    "/admin/dashboard": {
      "filePath": "admin/dashboard.tsx"
    },
    "/product/$productId": {
      "filePath": "product/$productId.tsx"
    },
    "/admin/categories/": {
      "filePath": "admin/categories/index.tsx"
    },
    "/admin/products/": {
      "filePath": "admin/products/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
